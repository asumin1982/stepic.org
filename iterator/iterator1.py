'''Задачи на тему итераторы и генераторы'''
#------ map, filter , lambda -----------
'''map:
    * Функция map принимает два аргумента:
     (1) функцию
     (2) итерируемый объект.
    * Применяет функцию к каждому элементу итерируемого объекта и возвращает объект map.
    * Функция может быть (1) обычной, (2) анонимной или (3) встроенной.
    * Списки, множества, кортежи и другие итерируемые объекты могут выступать в качестве второго аргумента функции map.
    * Объект map можно запросто конвертировать в другой итерируемый объект с помощью встроенных функций.
'''
#
PATH = '/home/asumin/Документы/Программирование Python/stepik.org/Основы и применение/Итераторы и генераторы/tests'
def read_file(path_file):   # Читаем файл
    with open(path_file) as file:
        return file.readlines()# возвр. список из строк
print(read_file(PATH))
#
'''1:'''
m = list(map(lambda x: x.strip(), read_file(PATH))) # перебираем список убирая пробелы с пом. map, lambda
print(m)
#
'''2:'''
def f1(x):
    if x%2 == 0: return d.append(x)
d = []
list(map(f1, [1,2,3,4,5,6])); print(d)
#
'''3:'''
def f3(x):
    for i in range(1,x+1):
        print(i, end='')
    print()
set(map(f3, range(1,5)))

'''---------------------------filter--------------------------------------'''
''' Функция filter() в Python применяет другую функцию к заданному 
итерируемому объекту (список, строка, словарь и так далее), 
проверяя, нужно ли сохранить конкретный элемент или нет. 
Простыми словами, она отфильтровывает то, что не проходит и возвращает все остальное.
-----------------------------------------------------------------------------------------
Функция filter() принимает два параметра. 
Первый — имя созданной пользователем функции или встроенной, анонимной, 
а второй — итерируемый объект (список, строка, множество, кортеж и так далее).
'''
#
l = list(filter(lambda x: x%2==0, [i for i in range(1,11)])) # filter выводит
print(l)
#
'''4:'''
l = list(filter(lambda x: 'create' in x, read_file(PATH)))
print(l)

def f2(x):
    if 'create' in x:
        return x.strip()
    return
print(list(filter(f2, read_file(PATH))))
#
print(set(filter(lambda x : x < 5, [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89])))